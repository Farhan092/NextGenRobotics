@*@model IEnumerable<NextGenRobotics.Models.Cart>




@{
    ViewBag.Title = "Index";
    decimal grandTotal = Model.Sum(item => item.Quantity * item.Product.UnitPrice);

}


<h2>Shopping Cart</h2>


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Product.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Product.PicturePath)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Product.UnitPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Quantity)
        </th>
        <th>Total Price</th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Product.Name)
            </td>
            <td>
                <img src="@Url.Content(item.Product.PicturePath)" alt="" style="width: 50px;" />
            </td>
            <td>
                <p id="product-price-@item.ProductId" data-price="@item.Product.UnitPrice">@item.Product.UnitPrice.ToString("C")</p>
            </td>
            <td>
                @using (Html.BeginForm("UpdateCartQuantity", "CustomerCart", FormMethod.Post, new { id = "cart-form-" + item.ProductId }))
                {
                    @Html.Hidden("productId", item.ProductId)

                    <div class="input-group">
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default btn-number" data-type="minus" onclick="updateQuantity(@item.ProductId, -1)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8" />
                                </svg>
                            </button>
                        </span>
                        <div class="quantity-box" style="width: 30px; height: 30px; text-align: center; padding: 2; font-size: 12px; line-height: 26px; border: 1px solid #ccc;">
                            @item.Quantity
                        </div>
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default btn-number" data-type="plus" onclick="updateQuantity(@item.ProductId, 1)">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                                </svg>
                            </button>
                        </span>
                    </div>
                }

            </td>
            <td>
                <p id="total-price-@item.ProductId">@((item.Quantity * item.Product.UnitPrice).ToString("C"))</p>
            </td>
            <td>
                @Html.ActionLink("Delete", "Delete", new { id = item.CartId })
            </td>


        </tr>

    }
    <tr>
        <td colspan="4" style="text-align: right;">
            <strong>Grand Total:</strong>
        </td>
        <td>
            <strong>@grandTotal.ToString("C")</strong>
        </td>
    </tr>

    <tr>
        <td colspan="4" style="text-align: left;">
            <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("Index", "CustomerProduct")'">Continue Shopping</button>
        </td>
        <td>
            <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("Create", "Payments")'">Checkout</button>
        </td>
    </tr>

</table>


<script>
    function updateQuantity(productId, change) {
        var form = document.getElementById('cart-form-' + productId);
        var quantityBox = form.querySelector('.quantity-box');
        var currentQuantity = parseInt(quantityBox.innerText);

        // Calculate new quantity
        var newQuantity = currentQuantity + change;

        if (newQuantity >= 1) {
            // Update quantity display
            quantityBox.innerText = newQuantity;

            // Create a hidden input for the new quantity
            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'quantity';
            hiddenInput.value = newQuantity;

            // Append the hidden input to the form
            form.appendChild(hiddenInput);

            // Submit the form
            form.submit();
        }
    }
</script>

*@




@model IEnumerable<NextGenRobotics.Models.Cart>

@{
    ViewBag.Title = "Index";
    bool isCartEmpty = !Model.Any();
    decimal grandTotal = isCartEmpty ? 0 : Model.Sum(item => item.Quantity * item.Product.UnitPrice);
}

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const box = document.getElementById('hide');
        if (box) {
            setTimeout(() => {
                box.style.display = 'none';
            }, 1000);
        }
    });
</script>

@if (TempData["MsgRem"] != null)
{
    <div id="hide" class="alert alert-success">
        <strong>@TempData["MsgRem"]</strong>
    </div>
}

@if (TempData["MsgQn"] != null)
{
    <div id="hide" class="alert alert-danger">
        <strong>@TempData["MsgQn"]</strong>
    </div>
}

<h2>Shopping Cart</h2>

@if (isCartEmpty)
{
    <div class="alert alert-info">
        <strong>Your cart is empty!</strong>
    </div>
}
else
{
    <table class="table">
        <tr>
            <th>@Html.DisplayNameFor(model => model.Product.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Product.PicturePath)</th>
            <th>@Html.DisplayNameFor(model => model.Product.UnitPrice)</th>
            <th>@Html.DisplayNameFor(model => model.Quantity)</th>
            <th>Total Price</th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Product.Name)</td>
                <td><img src="@Url.Content(item.Product.PicturePath)" alt="" style="width: 50px;" /></td>
                <td><p id="product-price-@item.ProductId" data-price="@item.Product.UnitPrice">@item.Product.UnitPrice.ToString("C")</p></td>
                <td>
                    @using (Html.BeginForm("UpdateCartQuantity", "CustomerCart", FormMethod.Post, new { id = "cart-form-" + item.ProductId }))
                    {
                        @Html.Hidden("productId", item.ProductId)
                        <div class="input-group">
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default btn-number" data-type="minus" onclick="updateQuantity(@item.ProductId, -1)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-dash-lg" viewBox="0 0 16 16">
                                        <path fill-rule="evenodd" d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8" />
                                    </svg>
                                </button>
                            </span>
                            <div class="quantity-box" style="width: 30px; height: 30px; text-align: center; padding: 2; font-size: 12px; line-height: 26px; border: 1px solid #ccc;">
                                @item.Quantity
                            </div>
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-default btn-number" data-type="plus" onclick="updateQuantity(@item.ProductId, 1)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                                    </svg>
                                </button>
                            </span>
                        </div>
                    }
                </td>
                <td><p id="total-price-@item.ProductId">@((item.Quantity * item.Product.UnitPrice).ToString("C"))</p></td>
                <td>
                    <a href="@Url.Action("Delete", "CustomerCart", new { id = item.CartId })" class="btn btn-link p-0" style="color: black;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                            <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                        </svg>
                    </a>
                </td>
            </tr>
        }
        <tr>
            <td colspan="4" style="text-align: right;"><strong>Grand Total:</strong></td>
            <td><strong>@grandTotal.ToString("C")</strong></td>
        </tr>
        <tr>
            <td colspan="4" style="text-align: left;">
                <button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("LandingPageView", "Users")'">Continue Shopping</button>
            </td>
            <td><button type="button" class="btn btn-primary" onclick="window.location.href='@Url.Action("Create", "Payments")'">Checkout</button></td>
        </tr>
    </table>
}

<script>
    function updateQuantity(productId, change) {
        var form = document.getElementById('cart-form-' + productId);
        var quantityBox = form.querySelector('.quantity-box');
        var currentQuantity = parseInt(quantityBox.innerText);

        // Calculate new quantity
        var newQuantity = currentQuantity + change;

        if (newQuantity >= 1) {
            // Update quantity display
            quantityBox.innerText = newQuantity;

            // Create a hidden input for the new quantity
            var hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'quantity';
            hiddenInput.value = newQuantity;

            // Append the hidden input to the form
            form.appendChild(hiddenInput);

            // Submit the form
            form.submit();
        }
    }
</script>
